package edagemanager

import (
	"fmt"
	"log"
	"sync"
	"time"
)

var (
	// support 3 minutes storage lease
	defaultLease = time.Minute * 3

	defaultEdageHostManager *EdageHostManager
)

type EdageHost struct {
	IP string
}

func (h *EdageHost) String() string {
	return h.IP
}

type EdageHostManager struct {
	mu    sync.Mutex
	table map[string]*EdageHost
}

func NewEdageHostManager() *EdageHostManager {
	if defaultEdageHostManager != nil {
		return defaultEdageHostManager
	}

	m := &EdageHostManager{
		table: make(map[string]*EdageHost),
	}

	defaultEdageHostManager = m
	return defaultEdageHostManager
}

func (m *EdageHostManager) AddSEdageHost(edage *Edage, host *EdageHost) {
	m.mu.Lock()
	defer m.mu.Unlock()
	key := fmt.Sprintf("%s-%s", edage.Name, host.String())
	log.Println("set edage host info ", key)
	m.table[key] = host
}

func (m *EdageHostManager) DelEdageHost(edage *Edage, host *EdageHost) {
	m.mu.Lock()
	defer m.mu.Unlock()
	key := fmt.Sprintf("%s-%s", edage.Name, host.String())
	delete(m.table, key)
}

func AddedageHost(edage *Edage, host *EdageHost) {
	if defaultEdageHostManager != nil {
		defaultEdageHostManager.AddSEdageHost(edage, host)
	}
}

func DelEdageHost(edage *Edage, host *EdageHost) {
	if defaultEdageHostManager != nil {
		defaultEdageHostManager.DelEdageHost(edage, host)
	}
}
